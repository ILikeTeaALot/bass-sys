/* automatically generated by rust-bindgen 0.69.4 */

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
use super::bass::*;

pub const BASS_CONFIG_MIXER_BUFFER: u32 = 67073;
pub const BASS_CONFIG_MIXER_POSEX: u32 = 67074;
pub const BASS_CONFIG_SPLIT_BUFFER: u32 = 67088;
pub const BASS_MIXER_RESUME: u32 = 4096;
pub const BASS_MIXER_POSEX: u32 = 8192;
pub const BASS_MIXER_NOSPEAKER: u32 = 16384;
pub const BASS_MIXER_QUEUE: u32 = 32768;
pub const BASS_MIXER_END: u32 = 65536;
pub const BASS_MIXER_NONSTOP: u32 = 131072;
pub const BASS_MIXER_CHAN_ABSOLUTE: u32 = 4096;
pub const BASS_MIXER_CHAN_BUFFER: u32 = 8192;
pub const BASS_MIXER_CHAN_LIMIT: u32 = 16384;
pub const BASS_MIXER_CHAN_MATRIX: u32 = 65536;
pub const BASS_MIXER_CHAN_PAUSE: u32 = 131072;
pub const BASS_MIXER_CHAN_DOWNMIX: u32 = 4194304;
pub const BASS_MIXER_CHAN_NORAMPIN: u32 = 8388608;
pub const BASS_MIXER_BUFFER: u32 = 8192;
pub const BASS_MIXER_LIMIT: u32 = 16384;
pub const BASS_MIXER_MATRIX: u32 = 65536;
pub const BASS_MIXER_PAUSE: u32 = 131072;
pub const BASS_MIXER_DOWNMIX: u32 = 4194304;
pub const BASS_MIXER_NORAMPIN: u32 = 8388608;
pub const BASS_ATTRIB_MIXER_LATENCY: u32 = 86016;
pub const BASS_ATTRIB_MIXER_THREADS: u32 = 86017;
pub const BASS_ATTRIB_MIXER_VOL: u32 = 86018;
pub const BASS_ACTIVE_WAITING: u32 = 5;
pub const BASS_ACTIVE_QUEUED: u32 = 6;
pub const BASS_SPLIT_SLAVE: u32 = 4096;
pub const BASS_SPLIT_POS: u32 = 8192;
pub const BASS_ATTRIB_SPLIT_ASYNCBUFFER: u32 = 86032;
pub const BASS_ATTRIB_SPLIT_ASYNCPERIOD: u32 = 86033;
pub const BASS_MIXER_ENV_FREQ: u32 = 1;
pub const BASS_MIXER_ENV_VOL: u32 = 2;
pub const BASS_MIXER_ENV_PAN: u32 = 3;
pub const BASS_MIXER_ENV_LOOP: u32 = 65536;
pub const BASS_MIXER_ENV_REMOVE: u32 = 131072;
pub const BASS_SYNC_MIXER_ENVELOPE: u32 = 66048;
pub const BASS_SYNC_MIXER_ENVELOPE_NODE: u32 = 66049;
pub const BASS_SYNC_MIXER_QUEUE: u32 = 66050;
pub const BASS_POS_MIXER_RESET: u32 = 65536;
pub const BASS_POS_MIXER_DELAY: u32 = 5;
pub const BASS_CTYPE_STREAM_MIXER: u32 = 67584;
pub const BASS_CTYPE_STREAM_SPLIT: u32 = 67585;
#[doc = " Envelope node"]
#[repr(C)]
pub struct BASS_MIXER_NODE {
    pub pos: QWORD,
    pub value: f32,
}
#[test]
fn bindgen_test_layout_BASS_MIXER_NODE() {
    const UNINIT: ::std::mem::MaybeUninit<BASS_MIXER_NODE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BASS_MIXER_NODE>(),
        16usize,
        concat!("Size of: ", stringify!(BASS_MIXER_NODE))
    );
    assert_eq!(
        ::std::mem::align_of::<BASS_MIXER_NODE>(),
        8usize,
        concat!("Alignment of ", stringify!(BASS_MIXER_NODE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BASS_MIXER_NODE),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BASS_MIXER_NODE),
            "::",
            stringify!(value)
        )
    );
}
impl Default for BASS_MIXER_NODE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::std::fmt::Debug for BASS_MIXER_NODE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "BASS_MIXER_NODE {{ value: {:?} }}", self.value)
    }
}
extern crate libloading;
pub struct BASS_Mix {
    __library: ::libloading::Library,
    pub BASS_Mixer_GetVersion: unsafe extern "C" fn() -> DWORD,
    pub BASS_Mixer_StreamCreate:
        unsafe extern "C" fn(freq: DWORD, chans: DWORD, flags: DWORD) -> HSTREAM,
    pub BASS_Mixer_StreamAddChannel:
        unsafe extern "C" fn(handle: HSTREAM, channel: DWORD, flags: DWORD) -> BOOL,
    pub BASS_Mixer_StreamAddChannelEx: unsafe extern "C" fn(
        handle: HSTREAM,
        channel: DWORD,
        flags: DWORD,
        start: QWORD,
        length: QWORD,
    ) -> BOOL,
    pub BASS_Mixer_StreamGetChannels:
        unsafe extern "C" fn(handle: HSTREAM, channels: *mut DWORD, count: DWORD) -> DWORD,
    pub BASS_Mixer_ChannelGetMixer: unsafe extern "C" fn(handle: DWORD) -> HSTREAM,
    pub BASS_Mixer_ChannelIsActive: unsafe extern "C" fn(handle: DWORD) -> DWORD,
    pub BASS_Mixer_ChannelFlags:
        unsafe extern "C" fn(handle: DWORD, flags: DWORD, mask: DWORD) -> DWORD,
    pub BASS_Mixer_ChannelRemove: unsafe extern "C" fn(handle: DWORD) -> BOOL,
    pub BASS_Mixer_ChannelSetPosition:
        unsafe extern "C" fn(handle: DWORD, pos: QWORD, mode: DWORD) -> BOOL,
    pub BASS_Mixer_ChannelGetPosition: unsafe extern "C" fn(handle: DWORD, mode: DWORD) -> QWORD,
    pub BASS_Mixer_ChannelGetPositionEx:
        unsafe extern "C" fn(channel: DWORD, mode: DWORD, delay: DWORD) -> QWORD,
    pub BASS_Mixer_ChannelGetLevel: unsafe extern "C" fn(handle: DWORD) -> DWORD,
    pub BASS_Mixer_ChannelGetLevelEx:
        unsafe extern "C" fn(handle: DWORD, levels: *mut f32, length: f32, flags: DWORD) -> BOOL,
    pub BASS_Mixer_ChannelGetData: unsafe extern "C" fn(
        handle: DWORD,
        buffer: *mut ::std::os::raw::c_void,
        length: DWORD,
    ) -> DWORD,
    pub BASS_Mixer_ChannelSetSync: unsafe extern "C" fn(
        handle: DWORD,
        type_: DWORD,
        param: QWORD,
        proc_: SYNCPROC,
        user: *mut ::std::os::raw::c_void,
    ) -> HSYNC,
    pub BASS_Mixer_ChannelRemoveSync: unsafe extern "C" fn(channel: DWORD, sync: HSYNC) -> BOOL,
    pub BASS_Mixer_ChannelSetMatrix:
        unsafe extern "C" fn(handle: DWORD, matrix: *const ::std::os::raw::c_void) -> BOOL,
    pub BASS_Mixer_ChannelSetMatrixEx: unsafe extern "C" fn(
        handle: DWORD,
        matrix: *const ::std::os::raw::c_void,
        time: f32,
    ) -> BOOL,
    pub BASS_Mixer_ChannelGetMatrix:
        unsafe extern "C" fn(handle: DWORD, matrix: *mut ::std::os::raw::c_void) -> BOOL,
    pub BASS_Mixer_ChannelSetEnvelope: unsafe extern "C" fn(
        handle: DWORD,
        type_: DWORD,
        nodes: *const BASS_MIXER_NODE,
        count: DWORD,
    ) -> BOOL,
    pub BASS_Mixer_ChannelSetEnvelopePos:
        unsafe extern "C" fn(handle: DWORD, type_: DWORD, pos: QWORD) -> BOOL,
    pub BASS_Mixer_ChannelGetEnvelopePos:
        unsafe extern "C" fn(handle: DWORD, type_: DWORD, value: *mut f32) -> QWORD,
    pub BASS_Split_StreamCreate: unsafe extern "C" fn(
        channel: DWORD,
        flags: DWORD,
        chanmap: *const ::std::os::raw::c_int,
    ) -> HSTREAM,
    pub BASS_Split_StreamGetSource: unsafe extern "C" fn(handle: HSTREAM) -> DWORD,
    pub BASS_Split_StreamGetSplits:
        unsafe extern "C" fn(handle: DWORD, splits: *mut HSTREAM, count: DWORD) -> DWORD,
    pub BASS_Split_StreamReset: unsafe extern "C" fn(handle: DWORD) -> BOOL,
    pub BASS_Split_StreamResetEx: unsafe extern "C" fn(handle: DWORD, offset: DWORD) -> BOOL,
    pub BASS_Split_StreamGetAvailable: unsafe extern "C" fn(handle: DWORD) -> DWORD,
}
impl BASS_Mix {
    pub unsafe fn new<P>(path: P) -> Result<Self, ::libloading::Error>
    where
        P: AsRef<::std::ffi::OsStr>,
    {
        let library = ::libloading::Library::new(path)?;
        Self::from_library(library)
    }
    pub unsafe fn from_library<L>(library: L) -> Result<Self, ::libloading::Error>
    where
        L: Into<::libloading::Library>,
    {
        let __library = library.into();
        let BASS_Mixer_GetVersion = __library.get(b"BASS_Mixer_GetVersion\0").map(|sym| *sym)?;
        let BASS_Mixer_StreamCreate = __library
            .get(b"BASS_Mixer_StreamCreate\0")
            .map(|sym| *sym)?;
        let BASS_Mixer_StreamAddChannel = __library
            .get(b"BASS_Mixer_StreamAddChannel\0")
            .map(|sym| *sym)?;
        let BASS_Mixer_StreamAddChannelEx = __library
            .get(b"BASS_Mixer_StreamAddChannelEx\0")
            .map(|sym| *sym)?;
        let BASS_Mixer_StreamGetChannels = __library
            .get(b"BASS_Mixer_StreamGetChannels\0")
            .map(|sym| *sym)?;
        let BASS_Mixer_ChannelGetMixer = __library
            .get(b"BASS_Mixer_ChannelGetMixer\0")
            .map(|sym| *sym)?;
        let BASS_Mixer_ChannelIsActive = __library
            .get(b"BASS_Mixer_ChannelIsActive\0")
            .map(|sym| *sym)?;
        let BASS_Mixer_ChannelFlags = __library
            .get(b"BASS_Mixer_ChannelFlags\0")
            .map(|sym| *sym)?;
        let BASS_Mixer_ChannelRemove = __library
            .get(b"BASS_Mixer_ChannelRemove\0")
            .map(|sym| *sym)?;
        let BASS_Mixer_ChannelSetPosition = __library
            .get(b"BASS_Mixer_ChannelSetPosition\0")
            .map(|sym| *sym)?;
        let BASS_Mixer_ChannelGetPosition = __library
            .get(b"BASS_Mixer_ChannelGetPosition\0")
            .map(|sym| *sym)?;
        let BASS_Mixer_ChannelGetPositionEx = __library
            .get(b"BASS_Mixer_ChannelGetPositionEx\0")
            .map(|sym| *sym)?;
        let BASS_Mixer_ChannelGetLevel = __library
            .get(b"BASS_Mixer_ChannelGetLevel\0")
            .map(|sym| *sym)?;
        let BASS_Mixer_ChannelGetLevelEx = __library
            .get(b"BASS_Mixer_ChannelGetLevelEx\0")
            .map(|sym| *sym)?;
        let BASS_Mixer_ChannelGetData = __library
            .get(b"BASS_Mixer_ChannelGetData\0")
            .map(|sym| *sym)?;
        let BASS_Mixer_ChannelSetSync = __library
            .get(b"BASS_Mixer_ChannelSetSync\0")
            .map(|sym| *sym)?;
        let BASS_Mixer_ChannelRemoveSync = __library
            .get(b"BASS_Mixer_ChannelRemoveSync\0")
            .map(|sym| *sym)?;
        let BASS_Mixer_ChannelSetMatrix = __library
            .get(b"BASS_Mixer_ChannelSetMatrix\0")
            .map(|sym| *sym)?;
        let BASS_Mixer_ChannelSetMatrixEx = __library
            .get(b"BASS_Mixer_ChannelSetMatrixEx\0")
            .map(|sym| *sym)?;
        let BASS_Mixer_ChannelGetMatrix = __library
            .get(b"BASS_Mixer_ChannelGetMatrix\0")
            .map(|sym| *sym)?;
        let BASS_Mixer_ChannelSetEnvelope = __library
            .get(b"BASS_Mixer_ChannelSetEnvelope\0")
            .map(|sym| *sym)?;
        let BASS_Mixer_ChannelSetEnvelopePos = __library
            .get(b"BASS_Mixer_ChannelSetEnvelopePos\0")
            .map(|sym| *sym)?;
        let BASS_Mixer_ChannelGetEnvelopePos = __library
            .get(b"BASS_Mixer_ChannelGetEnvelopePos\0")
            .map(|sym| *sym)?;
        let BASS_Split_StreamCreate = __library
            .get(b"BASS_Split_StreamCreate\0")
            .map(|sym| *sym)?;
        let BASS_Split_StreamGetSource = __library
            .get(b"BASS_Split_StreamGetSource\0")
            .map(|sym| *sym)?;
        let BASS_Split_StreamGetSplits = __library
            .get(b"BASS_Split_StreamGetSplits\0")
            .map(|sym| *sym)?;
        let BASS_Split_StreamReset = __library.get(b"BASS_Split_StreamReset\0").map(|sym| *sym)?;
        let BASS_Split_StreamResetEx = __library
            .get(b"BASS_Split_StreamResetEx\0")
            .map(|sym| *sym)?;
        let BASS_Split_StreamGetAvailable = __library
            .get(b"BASS_Split_StreamGetAvailable\0")
            .map(|sym| *sym)?;
        Ok(BASS_Mix {
            __library,
            BASS_Mixer_GetVersion,
            BASS_Mixer_StreamCreate,
            BASS_Mixer_StreamAddChannel,
            BASS_Mixer_StreamAddChannelEx,
            BASS_Mixer_StreamGetChannels,
            BASS_Mixer_ChannelGetMixer,
            BASS_Mixer_ChannelIsActive,
            BASS_Mixer_ChannelFlags,
            BASS_Mixer_ChannelRemove,
            BASS_Mixer_ChannelSetPosition,
            BASS_Mixer_ChannelGetPosition,
            BASS_Mixer_ChannelGetPositionEx,
            BASS_Mixer_ChannelGetLevel,
            BASS_Mixer_ChannelGetLevelEx,
            BASS_Mixer_ChannelGetData,
            BASS_Mixer_ChannelSetSync,
            BASS_Mixer_ChannelRemoveSync,
            BASS_Mixer_ChannelSetMatrix,
            BASS_Mixer_ChannelSetMatrixEx,
            BASS_Mixer_ChannelGetMatrix,
            BASS_Mixer_ChannelSetEnvelope,
            BASS_Mixer_ChannelSetEnvelopePos,
            BASS_Mixer_ChannelGetEnvelopePos,
            BASS_Split_StreamCreate,
            BASS_Split_StreamGetSource,
            BASS_Split_StreamGetSplits,
            BASS_Split_StreamReset,
            BASS_Split_StreamResetEx,
            BASS_Split_StreamGetAvailable,
        })
    }
    pub unsafe fn BASS_Mixer_GetVersion(&self) -> DWORD {
        (self.BASS_Mixer_GetVersion)()
    }
    pub unsafe fn BASS_Mixer_StreamCreate(
        &self,
        freq: DWORD,
        chans: DWORD,
        flags: DWORD,
    ) -> HSTREAM {
        (self.BASS_Mixer_StreamCreate)(freq, chans, flags)
    }
    pub unsafe fn BASS_Mixer_StreamAddChannel(
        &self,
        handle: HSTREAM,
        channel: DWORD,
        flags: DWORD,
    ) -> BOOL {
        (self.BASS_Mixer_StreamAddChannel)(handle, channel, flags)
    }
    pub unsafe fn BASS_Mixer_StreamAddChannelEx(
        &self,
        handle: HSTREAM,
        channel: DWORD,
        flags: DWORD,
        start: QWORD,
        length: QWORD,
    ) -> BOOL {
        (self.BASS_Mixer_StreamAddChannelEx)(handle, channel, flags, start, length)
    }
    pub unsafe fn BASS_Mixer_StreamGetChannels(
        &self,
        handle: HSTREAM,
        channels: *mut DWORD,
        count: DWORD,
    ) -> DWORD {
        (self.BASS_Mixer_StreamGetChannels)(handle, channels, count)
    }
    pub unsafe fn BASS_Mixer_ChannelGetMixer(&self, handle: DWORD) -> HSTREAM {
        (self.BASS_Mixer_ChannelGetMixer)(handle)
    }
    pub unsafe fn BASS_Mixer_ChannelIsActive(&self, handle: DWORD) -> DWORD {
        (self.BASS_Mixer_ChannelIsActive)(handle)
    }
    pub unsafe fn BASS_Mixer_ChannelFlags(
        &self,
        handle: DWORD,
        flags: DWORD,
        mask: DWORD,
    ) -> DWORD {
        (self.BASS_Mixer_ChannelFlags)(handle, flags, mask)
    }
    pub unsafe fn BASS_Mixer_ChannelRemove(&self, handle: DWORD) -> BOOL {
        (self.BASS_Mixer_ChannelRemove)(handle)
    }
    pub unsafe fn BASS_Mixer_ChannelSetPosition(
        &self,
        handle: DWORD,
        pos: QWORD,
        mode: DWORD,
    ) -> BOOL {
        (self.BASS_Mixer_ChannelSetPosition)(handle, pos, mode)
    }
    pub unsafe fn BASS_Mixer_ChannelGetPosition(&self, handle: DWORD, mode: DWORD) -> QWORD {
        (self.BASS_Mixer_ChannelGetPosition)(handle, mode)
    }
    pub unsafe fn BASS_Mixer_ChannelGetPositionEx(
        &self,
        channel: DWORD,
        mode: DWORD,
        delay: DWORD,
    ) -> QWORD {
        (self.BASS_Mixer_ChannelGetPositionEx)(channel, mode, delay)
    }
    pub unsafe fn BASS_Mixer_ChannelGetLevel(&self, handle: DWORD) -> DWORD {
        (self.BASS_Mixer_ChannelGetLevel)(handle)
    }
    pub unsafe fn BASS_Mixer_ChannelGetLevelEx(
        &self,
        handle: DWORD,
        levels: *mut f32,
        length: f32,
        flags: DWORD,
    ) -> BOOL {
        (self.BASS_Mixer_ChannelGetLevelEx)(handle, levels, length, flags)
    }
    pub unsafe fn BASS_Mixer_ChannelGetData(
        &self,
        handle: DWORD,
        buffer: *mut ::std::os::raw::c_void,
        length: DWORD,
    ) -> DWORD {
        (self.BASS_Mixer_ChannelGetData)(handle, buffer, length)
    }
    pub unsafe fn BASS_Mixer_ChannelSetSync(
        &self,
        handle: DWORD,
        type_: DWORD,
        param: QWORD,
        proc_: SYNCPROC,
        user: *mut ::std::os::raw::c_void,
    ) -> HSYNC {
        (self.BASS_Mixer_ChannelSetSync)(handle, type_, param, proc_, user)
    }
    pub unsafe fn BASS_Mixer_ChannelRemoveSync(&self, channel: DWORD, sync: HSYNC) -> BOOL {
        (self.BASS_Mixer_ChannelRemoveSync)(channel, sync)
    }
    pub unsafe fn BASS_Mixer_ChannelSetMatrix(
        &self,
        handle: DWORD,
        matrix: *const ::std::os::raw::c_void,
    ) -> BOOL {
        (self.BASS_Mixer_ChannelSetMatrix)(handle, matrix)
    }
    pub unsafe fn BASS_Mixer_ChannelSetMatrixEx(
        &self,
        handle: DWORD,
        matrix: *const ::std::os::raw::c_void,
        time: f32,
    ) -> BOOL {
        (self.BASS_Mixer_ChannelSetMatrixEx)(handle, matrix, time)
    }
    pub unsafe fn BASS_Mixer_ChannelGetMatrix(
        &self,
        handle: DWORD,
        matrix: *mut ::std::os::raw::c_void,
    ) -> BOOL {
        (self.BASS_Mixer_ChannelGetMatrix)(handle, matrix)
    }
    pub unsafe fn BASS_Mixer_ChannelSetEnvelope(
        &self,
        handle: DWORD,
        type_: DWORD,
        nodes: *const BASS_MIXER_NODE,
        count: DWORD,
    ) -> BOOL {
        (self.BASS_Mixer_ChannelSetEnvelope)(handle, type_, nodes, count)
    }
    pub unsafe fn BASS_Mixer_ChannelSetEnvelopePos(
        &self,
        handle: DWORD,
        type_: DWORD,
        pos: QWORD,
    ) -> BOOL {
        (self.BASS_Mixer_ChannelSetEnvelopePos)(handle, type_, pos)
    }
    pub unsafe fn BASS_Mixer_ChannelGetEnvelopePos(
        &self,
        handle: DWORD,
        type_: DWORD,
        value: *mut f32,
    ) -> QWORD {
        (self.BASS_Mixer_ChannelGetEnvelopePos)(handle, type_, value)
    }
    pub unsafe fn BASS_Split_StreamCreate(
        &self,
        channel: DWORD,
        flags: DWORD,
        chanmap: *const ::std::os::raw::c_int,
    ) -> HSTREAM {
        (self.BASS_Split_StreamCreate)(channel, flags, chanmap)
    }
    pub unsafe fn BASS_Split_StreamGetSource(&self, handle: HSTREAM) -> DWORD {
        (self.BASS_Split_StreamGetSource)(handle)
    }
    pub unsafe fn BASS_Split_StreamGetSplits(
        &self,
        handle: DWORD,
        splits: *mut HSTREAM,
        count: DWORD,
    ) -> DWORD {
        (self.BASS_Split_StreamGetSplits)(handle, splits, count)
    }
    pub unsafe fn BASS_Split_StreamReset(&self, handle: DWORD) -> BOOL {
        (self.BASS_Split_StreamReset)(handle)
    }
    pub unsafe fn BASS_Split_StreamResetEx(&self, handle: DWORD, offset: DWORD) -> BOOL {
        (self.BASS_Split_StreamResetEx)(handle, offset)
    }
    pub unsafe fn BASS_Split_StreamGetAvailable(&self, handle: DWORD) -> DWORD {
        (self.BASS_Split_StreamGetAvailable)(handle)
    }
}
