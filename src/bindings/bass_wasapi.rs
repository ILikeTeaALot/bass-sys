/* automatically generated by rust-bindgen 0.69.4 */

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

use super::bass::*;

pub const BASS_CONFIG_WASAPI_PERSIST: DWORD = DWORD(65);
pub const BASS_CONFIG_REC_WASAPI: DWORD = DWORD(66);
pub const BASS_DEVICE_ENABLED: DWORD = DWORD(1);
pub const BASS_DEVICE_DEFAULT: DWORD = DWORD(2);
pub const BASS_DEVICE_INIT: DWORD = DWORD(4);
pub const BASS_DEVICE_LOOPBACK: DWORD = DWORD(8);
pub const BASS_ERROR_WASAPI: u32 = 5000;
pub const BASS_ERROR_WASAPI_BUFFER: u32 = 5001;
pub const BASS_ERROR_WASAPI_CATEGORY: u32 = 5002;
pub const BASS_ERROR_WASAPI_DENIED: u32 = 5003;
pub const BASS_WASAPI_TYPE_NETWORKDEVICE: DWORD = DWORD(0);
pub const BASS_WASAPI_TYPE_SPEAKERS: DWORD = DWORD(1);
pub const BASS_WASAPI_TYPE_LINELEVEL: DWORD = DWORD(2);
pub const BASS_WASAPI_TYPE_HEADPHONES: DWORD = DWORD(3);
pub const BASS_WASAPI_TYPE_MICROPHONE: DWORD = DWORD(4);
pub const BASS_WASAPI_TYPE_HEADSET: DWORD = DWORD(5);
pub const BASS_WASAPI_TYPE_HANDSET: DWORD = DWORD(6);
pub const BASS_WASAPI_TYPE_DIGITAL: DWORD = DWORD(7);
pub const BASS_WASAPI_TYPE_SPDIF: DWORD = DWORD(8);
pub const BASS_WASAPI_TYPE_HDMI: DWORD = DWORD(9);
pub const BASS_WASAPI_TYPE_UNKNOWN: DWORD = DWORD(10);
pub const BASS_DEVICE_INPUT: DWORD = DWORD(16);
pub const BASS_DEVICE_UNPLUGGED: DWORD = DWORD(32);
pub const BASS_DEVICE_DISABLED: DWORD = DWORD(64);
pub const BASS_WASAPI_EXCLUSIVE: DWORD = DWORD(1);
pub const BASS_WASAPI_AUTOFORMAT: DWORD = DWORD(2);
pub const BASS_WASAPI_BUFFER: DWORD = DWORD(4);
pub const BASS_WASAPI_EVENT: DWORD = DWORD(16);
pub const BASS_WASAPI_SAMPLES: DWORD = DWORD(32);
pub const BASS_WASAPI_DITHER: DWORD = DWORD(64);
pub const BASS_WASAPI_RAW: DWORD = DWORD(128);
pub const BASS_WASAPI_ASYNC: DWORD = DWORD(256);
pub const BASS_WASAPI_CATEGORY_MASK: DWORD = DWORD(61440);
pub const BASS_WASAPI_CATEGORY_OTHER: DWORD = DWORD(0);
pub const BASS_WASAPI_CATEGORY_FOREGROUNDONLYMEDIA: DWORD = DWORD(4096);
pub const BASS_WASAPI_CATEGORY_BACKGROUNDCAPABLEMEDIA: DWORD = DWORD(8192);
pub const BASS_WASAPI_CATEGORY_COMMUNICATIONS: DWORD = DWORD(12288);
pub const BASS_WASAPI_CATEGORY_ALERTS: DWORD = DWORD(16384);
pub const BASS_WASAPI_CATEGORY_SOUNDEFFECTS: DWORD = DWORD(20480);
pub const BASS_WASAPI_CATEGORY_GAMEEFFECTS: DWORD = DWORD(24576);
pub const BASS_WASAPI_CATEGORY_GAMEMEDIA: DWORD = DWORD(28672);
pub const BASS_WASAPI_CATEGORY_GAMECHAT: DWORD = DWORD(32768);
pub const BASS_WASAPI_CATEGORY_SPEECH: DWORD = DWORD(36864);
pub const BASS_WASAPI_CATEGORY_MOVIE: DWORD = DWORD(40960);
pub const BASS_WASAPI_CATEGORY_MEDIA: DWORD = DWORD(45056);
pub const BASS_WASAPI_FORMAT_FLOAT: DWORD = DWORD(0);
pub const BASS_WASAPI_FORMAT_8BIT: DWORD = DWORD(1);
pub const BASS_WASAPI_FORMAT_16BIT: DWORD = DWORD(2);
pub const BASS_WASAPI_FORMAT_24BIT: DWORD = DWORD(3);
pub const BASS_WASAPI_FORMAT_32BIT: DWORD = DWORD(4);
pub const BASS_WASAPI_CURVE_DB: DWORD = DWORD(0);
pub const BASS_WASAPI_CURVE_LINEAR: DWORD = DWORD(1);
pub const BASS_WASAPI_CURVE_WINDOWS: DWORD = DWORD(2);
pub const BASS_WASAPI_VOL_SESSION: DWORD = DWORD(8);
pub const BASS_WASAPI_NOTIFY_ENABLED: DWORD = DWORD(0);
pub const BASS_WASAPI_NOTIFY_DISABLED: DWORD = DWORD(1);
pub const BASS_WASAPI_NOTIFY_DEFOUTPUT: DWORD = DWORD(2);
pub const BASS_WASAPI_NOTIFY_DEFINPUT: DWORD = DWORD(3);
pub const BASS_WASAPI_NOTIFY_FAIL: DWORD = DWORD(256);
#[doc = " Device info structure"]
#[repr(C)]
pub struct BASS_WASAPI_DEVICEINFO {
	pub name: *const ::std::os::raw::c_char,
	pub id: *const ::std::os::raw::c_char,
	pub type_: DWORD,
	pub flags: DWORD,
	pub minperiod: f32,
	pub defperiod: f32,
	pub mixfreq: DWORD,
	pub mixchans: DWORD,
}
const _: () = {
	["Size of BASS_WASAPI_DEVICEINFO"][::std::mem::size_of::<BASS_WASAPI_DEVICEINFO>() - 40usize];
	["Alignment of BASS_WASAPI_DEVICEINFO"][::std::mem::align_of::<BASS_WASAPI_DEVICEINFO>() - 8usize];
	["Offset of field: BASS_WASAPI_DEVICEINFO::name"][::std::mem::offset_of!(BASS_WASAPI_DEVICEINFO, name) - 0usize];
	["Offset of field: BASS_WASAPI_DEVICEINFO::id"][::std::mem::offset_of!(BASS_WASAPI_DEVICEINFO, id) - 8usize];
	["Offset of field: BASS_WASAPI_DEVICEINFO::type_"][::std::mem::offset_of!(BASS_WASAPI_DEVICEINFO, type_) - 16usize];
	["Offset of field: BASS_WASAPI_DEVICEINFO::flags"][::std::mem::offset_of!(BASS_WASAPI_DEVICEINFO, flags) - 20usize];
	["Offset of field: BASS_WASAPI_DEVICEINFO::minperiod"]
		[::std::mem::offset_of!(BASS_WASAPI_DEVICEINFO, minperiod) - 24usize];
	["Offset of field: BASS_WASAPI_DEVICEINFO::defperiod"]
		[::std::mem::offset_of!(BASS_WASAPI_DEVICEINFO, defperiod) - 28usize];
	["Offset of field: BASS_WASAPI_DEVICEINFO::mixfreq"]
		[::std::mem::offset_of!(BASS_WASAPI_DEVICEINFO, mixfreq) - 32usize];
	["Offset of field: BASS_WASAPI_DEVICEINFO::mixchans"]
		[::std::mem::offset_of!(BASS_WASAPI_DEVICEINFO, mixchans) - 36usize];
};
impl Default for BASS_WASAPI_DEVICEINFO {
	fn default() -> Self {
		let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
		unsafe {
			::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
			s.assume_init()
		}
	}
}
impl ::std::fmt::Debug for BASS_WASAPI_DEVICEINFO {
	fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
		write!(
			f,
			"BASS_WASAPI_DEVICEINFO {{ name: {:?}, id: {:?}, minperiod: {:?}, defperiod: {:?} }}",
			self.name, self.id, self.minperiod, self.defperiod
		)
	}
}
#[repr(C)]
pub struct BASS_WASAPI_INFO {
	pub initflags: DWORD,
	pub freq: DWORD,
	pub chans: DWORD,
	pub format: DWORD,
	pub buflen: DWORD,
	pub volmax: f32,
	pub volmin: f32,
	pub volstep: f32,
}
const _: () = {
	["Size of BASS_WASAPI_INFO"][::std::mem::size_of::<BASS_WASAPI_INFO>() - 32usize];
	["Alignment of BASS_WASAPI_INFO"][::std::mem::align_of::<BASS_WASAPI_INFO>() - 4usize];
	["Offset of field: BASS_WASAPI_INFO::initflags"][::std::mem::offset_of!(BASS_WASAPI_INFO, initflags) - 0usize];
	["Offset of field: BASS_WASAPI_INFO::freq"][::std::mem::offset_of!(BASS_WASAPI_INFO, freq) - 4usize];
	["Offset of field: BASS_WASAPI_INFO::chans"][::std::mem::offset_of!(BASS_WASAPI_INFO, chans) - 8usize];
	["Offset of field: BASS_WASAPI_INFO::format"][::std::mem::offset_of!(BASS_WASAPI_INFO, format) - 12usize];
	["Offset of field: BASS_WASAPI_INFO::buflen"][::std::mem::offset_of!(BASS_WASAPI_INFO, buflen) - 16usize];
	["Offset of field: BASS_WASAPI_INFO::volmax"][::std::mem::offset_of!(BASS_WASAPI_INFO, volmax) - 20usize];
	["Offset of field: BASS_WASAPI_INFO::volmin"][::std::mem::offset_of!(BASS_WASAPI_INFO, volmin) - 24usize];
	["Offset of field: BASS_WASAPI_INFO::volstep"][::std::mem::offset_of!(BASS_WASAPI_INFO, volstep) - 28usize];
};
impl Default for BASS_WASAPI_INFO {
	fn default() -> Self {
		let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
		unsafe {
			::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
			s.assume_init()
		}
	}
}
impl ::std::fmt::Debug for BASS_WASAPI_INFO {
	fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
		write!(
			f,
			"BASS_WASAPI_INFO {{ volmax: {:?}, volmin: {:?}, volstep: {:?} }}",
			self.volmax, self.volmin, self.volstep
		)
	}
}
pub type WASAPIPROC = ::std::option::Option<
	unsafe extern "C" fn(
		buffer: *mut ::std::os::raw::c_void,
		length: DWORD,
		user: *mut ::std::os::raw::c_void,
	) -> DWORD,
>;
pub type WASAPINOTIFYPROC =
	::std::option::Option<unsafe extern "C" fn(notify: DWORD, device: DWORD, user: *mut ::std::os::raw::c_void)>;
pub struct BASS_WASAPI {
	__library: ::libloading::Library,
	pub BASS_WASAPI_GetVersion: unsafe extern "C" fn() -> DWORD,
	pub BASS_WASAPI_SetNotify: unsafe extern "C" fn(proc_: WASAPINOTIFYPROC, user: *mut ::std::os::raw::c_void) -> BOOL,
	pub BASS_WASAPI_GetDeviceInfo: unsafe extern "C" fn(device: DWORD, info: *mut BASS_WASAPI_DEVICEINFO) -> BOOL,
	pub BASS_WASAPI_GetDeviceLevel: unsafe extern "C" fn(device: DWORD, chan: ::std::os::raw::c_int) -> f32,
	pub BASS_WASAPI_SetDevice: unsafe extern "C" fn(device: DWORD) -> BOOL,
	pub BASS_WASAPI_GetDevice: unsafe extern "C" fn() -> DWORD,
	pub BASS_WASAPI_CheckFormat: unsafe extern "C" fn(device: DWORD, freq: DWORD, chans: DWORD, flags: DWORD) -> DWORD,
	pub BASS_WASAPI_Init: unsafe extern "C" fn(
		device: ::std::os::raw::c_int,
		freq: DWORD,
		chans: DWORD,
		flags: DWORD,
		buffer: f32,
		period: f32,
		proc_: WASAPIPROC,
		user: *mut ::std::os::raw::c_void,
	) -> BOOL,
	pub BASS_WASAPI_Free: unsafe extern "C" fn() -> BOOL,
	pub BASS_WASAPI_GetInfo: unsafe extern "C" fn(info: *mut BASS_WASAPI_INFO) -> BOOL,
	pub BASS_WASAPI_GetCPU: unsafe extern "C" fn() -> f32,
	pub BASS_WASAPI_Lock: unsafe extern "C" fn(lock: BOOL) -> BOOL,
	pub BASS_WASAPI_Start: unsafe extern "C" fn() -> BOOL,
	pub BASS_WASAPI_Stop: unsafe extern "C" fn(reset: BOOL) -> BOOL,
	pub BASS_WASAPI_IsStarted: unsafe extern "C" fn() -> BOOL,
	pub BASS_WASAPI_SetVolume: unsafe extern "C" fn(mode: DWORD, volume: f32) -> BOOL,
	pub BASS_WASAPI_GetVolume: unsafe extern "C" fn(mode: DWORD) -> f32,
	pub BASS_WASAPI_SetMute: unsafe extern "C" fn(mode: DWORD, mute: BOOL) -> BOOL,
	pub BASS_WASAPI_GetMute: unsafe extern "C" fn(mode: DWORD) -> BOOL,
	pub BASS_WASAPI_PutData: unsafe extern "C" fn(buffer: *mut ::std::os::raw::c_void, length: DWORD) -> DWORD,
	pub BASS_WASAPI_GetData: unsafe extern "C" fn(buffer: *mut ::std::os::raw::c_void, length: DWORD) -> DWORD,
	pub BASS_WASAPI_GetLevel: unsafe extern "C" fn() -> DWORD,
	pub BASS_WASAPI_GetLevelEx: unsafe extern "C" fn(levels: *mut f32, length: f32, flags: DWORD) -> BOOL,
}
impl BASS_WASAPI {
	pub unsafe fn new<P>(path: P) -> Result<Self, ::libloading::Error>
	where
		P: AsRef<::std::ffi::OsStr>,
	{
		let library = ::libloading::Library::new(path)?;
		Self::from_library(library)
	}
	pub unsafe fn from_library<L>(library: L) -> Result<Self, ::libloading::Error>
	where
		L: Into<::libloading::Library>,
	{
		let __library = library.into();
		let BASS_WASAPI_GetVersion = __library.get(b"BASS_WASAPI_GetVersion\0").map(|sym| *sym)?;
		let BASS_WASAPI_SetNotify = __library.get(b"BASS_WASAPI_SetNotify\0").map(|sym| *sym)?;
		let BASS_WASAPI_GetDeviceInfo = __library.get(b"BASS_WASAPI_GetDeviceInfo\0").map(|sym| *sym)?;
		let BASS_WASAPI_GetDeviceLevel = __library.get(b"BASS_WASAPI_GetDeviceLevel\0").map(|sym| *sym)?;
		let BASS_WASAPI_SetDevice = __library.get(b"BASS_WASAPI_SetDevice\0").map(|sym| *sym)?;
		let BASS_WASAPI_GetDevice = __library.get(b"BASS_WASAPI_GetDevice\0").map(|sym| *sym)?;
		let BASS_WASAPI_CheckFormat = __library.get(b"BASS_WASAPI_CheckFormat\0").map(|sym| *sym)?;
		let BASS_WASAPI_Init = __library.get(b"BASS_WASAPI_Init\0").map(|sym| *sym)?;
		let BASS_WASAPI_Free = __library.get(b"BASS_WASAPI_Free\0").map(|sym| *sym)?;
		let BASS_WASAPI_GetInfo = __library.get(b"BASS_WASAPI_GetInfo\0").map(|sym| *sym)?;
		let BASS_WASAPI_GetCPU = __library.get(b"BASS_WASAPI_GetCPU\0").map(|sym| *sym)?;
		let BASS_WASAPI_Lock = __library.get(b"BASS_WASAPI_Lock\0").map(|sym| *sym)?;
		let BASS_WASAPI_Start = __library.get(b"BASS_WASAPI_Start\0").map(|sym| *sym)?;
		let BASS_WASAPI_Stop = __library.get(b"BASS_WASAPI_Stop\0").map(|sym| *sym)?;
		let BASS_WASAPI_IsStarted = __library.get(b"BASS_WASAPI_IsStarted\0").map(|sym| *sym)?;
		let BASS_WASAPI_SetVolume = __library.get(b"BASS_WASAPI_SetVolume\0").map(|sym| *sym)?;
		let BASS_WASAPI_GetVolume = __library.get(b"BASS_WASAPI_GetVolume\0").map(|sym| *sym)?;
		let BASS_WASAPI_SetMute = __library.get(b"BASS_WASAPI_SetMute\0").map(|sym| *sym)?;
		let BASS_WASAPI_GetMute = __library.get(b"BASS_WASAPI_GetMute\0").map(|sym| *sym)?;
		let BASS_WASAPI_PutData = __library.get(b"BASS_WASAPI_PutData\0").map(|sym| *sym)?;
		let BASS_WASAPI_GetData = __library.get(b"BASS_WASAPI_GetData\0").map(|sym| *sym)?;
		let BASS_WASAPI_GetLevel = __library.get(b"BASS_WASAPI_GetLevel\0").map(|sym| *sym)?;
		let BASS_WASAPI_GetLevelEx = __library.get(b"BASS_WASAPI_GetLevelEx\0").map(|sym| *sym)?;
		Ok(BASS_WASAPI {
			__library,
			BASS_WASAPI_GetVersion,
			BASS_WASAPI_SetNotify,
			BASS_WASAPI_GetDeviceInfo,
			BASS_WASAPI_GetDeviceLevel,
			BASS_WASAPI_SetDevice,
			BASS_WASAPI_GetDevice,
			BASS_WASAPI_CheckFormat,
			BASS_WASAPI_Init,
			BASS_WASAPI_Free,
			BASS_WASAPI_GetInfo,
			BASS_WASAPI_GetCPU,
			BASS_WASAPI_Lock,
			BASS_WASAPI_Start,
			BASS_WASAPI_Stop,
			BASS_WASAPI_IsStarted,
			BASS_WASAPI_SetVolume,
			BASS_WASAPI_GetVolume,
			BASS_WASAPI_SetMute,
			BASS_WASAPI_GetMute,
			BASS_WASAPI_PutData,
			BASS_WASAPI_GetData,
			BASS_WASAPI_GetLevel,
			BASS_WASAPI_GetLevelEx,
		})
	}
	pub unsafe fn BASS_WASAPI_GetVersion(&self) -> DWORD {
		(self.BASS_WASAPI_GetVersion)()
	}
	pub unsafe fn BASS_WASAPI_SetNotify(&self, proc_: WASAPINOTIFYPROC, user: *mut ::std::os::raw::c_void) -> BOOL {
		(self.BASS_WASAPI_SetNotify)(proc_, user)
	}
	pub unsafe fn BASS_WASAPI_GetDeviceInfo(&self, device: DWORD, info: *mut BASS_WASAPI_DEVICEINFO) -> BOOL {
		(self.BASS_WASAPI_GetDeviceInfo)(device, info)
	}
	pub unsafe fn BASS_WASAPI_GetDeviceLevel(&self, device: DWORD, chan: ::std::os::raw::c_int) -> f32 {
		(self.BASS_WASAPI_GetDeviceLevel)(device, chan)
	}
	pub unsafe fn BASS_WASAPI_SetDevice(&self, device: DWORD) -> BOOL {
		(self.BASS_WASAPI_SetDevice)(device)
	}
	pub unsafe fn BASS_WASAPI_GetDevice(&self) -> DWORD {
		(self.BASS_WASAPI_GetDevice)()
	}
	pub unsafe fn BASS_WASAPI_CheckFormat(&self, device: DWORD, freq: DWORD, chans: DWORD, flags: DWORD) -> DWORD {
		(self.BASS_WASAPI_CheckFormat)(device, freq, chans, flags)
	}
	pub unsafe fn BASS_WASAPI_Init(
		&self,
		device: ::std::os::raw::c_int,
		freq: DWORD,
		chans: DWORD,
		flags: DWORD,
		buffer: f32,
		period: f32,
		proc_: WASAPIPROC,
		user: *mut ::std::os::raw::c_void,
	) -> BOOL {
		(self.BASS_WASAPI_Init)(device, freq, chans, flags, buffer, period, proc_, user)
	}
	pub unsafe fn BASS_WASAPI_Free(&self) -> BOOL {
		(self.BASS_WASAPI_Free)()
	}
	pub unsafe fn BASS_WASAPI_GetInfo(&self, info: *mut BASS_WASAPI_INFO) -> BOOL {
		(self.BASS_WASAPI_GetInfo)(info)
	}
	pub unsafe fn BASS_WASAPI_GetCPU(&self) -> f32 {
		(self.BASS_WASAPI_GetCPU)()
	}
	pub unsafe fn BASS_WASAPI_Lock(&self, lock: BOOL) -> BOOL {
		(self.BASS_WASAPI_Lock)(lock)
	}
	pub unsafe fn BASS_WASAPI_Start(&self) -> BOOL {
		(self.BASS_WASAPI_Start)()
	}
	pub unsafe fn BASS_WASAPI_Stop(&self, reset: BOOL) -> BOOL {
		(self.BASS_WASAPI_Stop)(reset)
	}
	pub unsafe fn BASS_WASAPI_IsStarted(&self) -> BOOL {
		(self.BASS_WASAPI_IsStarted)()
	}
	pub unsafe fn BASS_WASAPI_SetVolume(&self, mode: DWORD, volume: f32) -> BOOL {
		(self.BASS_WASAPI_SetVolume)(mode, volume)
	}
	pub unsafe fn BASS_WASAPI_GetVolume(&self, mode: DWORD) -> f32 {
		(self.BASS_WASAPI_GetVolume)(mode)
	}
	pub unsafe fn BASS_WASAPI_SetMute(&self, mode: DWORD, mute: BOOL) -> BOOL {
		(self.BASS_WASAPI_SetMute)(mode, mute)
	}
	pub unsafe fn BASS_WASAPI_GetMute(&self, mode: DWORD) -> BOOL {
		(self.BASS_WASAPI_GetMute)(mode)
	}
	pub unsafe fn BASS_WASAPI_PutData(&self, buffer: *mut ::std::os::raw::c_void, length: DWORD) -> DWORD {
		(self.BASS_WASAPI_PutData)(buffer, length)
	}
	pub unsafe fn BASS_WASAPI_GetData(&self, buffer: *mut ::std::os::raw::c_void, length: DWORD) -> DWORD {
		(self.BASS_WASAPI_GetData)(buffer, length)
	}
	pub unsafe fn BASS_WASAPI_GetLevel(&self) -> DWORD {
		(self.BASS_WASAPI_GetLevel)()
	}
	pub unsafe fn BASS_WASAPI_GetLevelEx(&self, levels: *mut f32, length: f32, flags: DWORD) -> BOOL {
		(self.BASS_WASAPI_GetLevelEx)(levels, length, flags)
	}
}
